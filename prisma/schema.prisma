generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String    @id @default(uuid())
  name      String
  email     String
  phone     String
  cpf       String?
  cnpj      String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  users     User[]
  licenses  License[]

  @@map("clients")
}

model User {
  id        String    @id @default(uuid())
  username  String
  fullName  String    @map("full_name")
  email     String
  cpf       String
  phone     String
  password  String
  role      String    @default("user")
  clientId  String    @map("client_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  client    Client    @relation(fields: [clientId], references: [id])

  @@map("users")
}

model License {
  id             String     @id @default(uuid())
  description    String
  expirationDate DateTime   @map("expiration_date")
  status         String
  hasQueue       Boolean    @default(false) @map("has_queue")
  clientId       String     @map("client_id")
  licenseKey     String     @map("license_key")
  robotTypeId    String?    @map("robot_type_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  deletedAt      DateTime?  @map("deleted_at")
  client         Client     @relation(fields: [clientId], references: [id])
  robotType      RobotType? @relation(fields: [robotTypeId], references: [id])
  tasks          Task[]

  @@map("licenses")
}

model RobotType {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  licenses  License[]
  robots    Robot[]

  @@map("robot_types")
}

model Robot {
  id        String    @id @default(uuid())
  title     String
  typeId    String
  status    String
  bankId    String?   @map("bank_id")
  url       String
  username  String
  password  String
  params    Json //outros dados exigidos pelo banco
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  robotType RobotType @relation(fields: [typeId], references: [id])
  tasks     Task[]
  bank      Bank?     @relation(fields: [bankId], references: [id])

  @@map("robots")
}

model Bank {
  id           String    @id @default(uuid())
  name         String
  phone        String
  email        String
  febrabanCode Int       @map("febraban_code")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  Robot        Robot[]

  @@map("banks")
}

model Task {
  id         String    @id @default(uuid())
  licenseId  String    @map("license_id")
  robotId    String    @map("robot_id")
  status     String    @default("pending")
  parameters Json
  result     Json?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  finishedAt DateTime? @map("finished_at")
  license    License   @relation(fields: [licenseId], references: [id])
  robot      Robot     @relation(fields: [robotId], references: [id])

  @@map("tasks")
}
